#!/usr/bin/env python3
"""
Estimate the kinematic model error of a robot manipulator
The model is based on the DH convention
""" 
# import statements
from re import I
import rospy
import numpy as np
import math
import matplotlib.pyplot as plt
#from geometry_msgs.msg import Twist, Pose
#from vservo.msg import  Point2DArray
#from std_msgs.msg import Float32
#from std_srvs.srv import SetBool, SetBoolResponse
#import utils

class DHestimator():
    """
    Estimate the kinematic model error of a robot manipulator
    The model is based on the DH convention
    """

    def __init__(self) -> None:
        """
        Constructor
        """
    
    def get_T__i(self, theta__i, d__i, a__i, alpha__i) -> np.array:
        t1 = math.cos(theta__i)
        t2 = math.sin(theta__i)
        t3 = math.cos(alpha__i)
        t4 = math.sin(alpha__i)
        return np.array([[t1,-t2 * t3,t2 * t4,t1 * a__i],[t2,t1 * t3,-t1 * t4,t2 * a__i],[0,t4,t3,d__i],[0,0,0,1]])


    def get_T_jk(self,j,k,theta_all, d_all, a_all, alpha_all) -> np.array:
        """
        T_jk = T^j_k
        """
        theta_all, d_all, a_all, alpha_all = theta_all.flatten(), d_all.flatten(), a_all.flatten(), alpha_all.flatten()
        assert theta_all.size==7 and d_all.size==7 and a_all.size==7 and alpha_all.size==7, "DH param vector len"
        T=np.eye(4)
        for i in range(k+1, j+1, 1): # first i=k+1, last i=j
            T=np.matmul(T,self.get_T__i(theta_all[i-1], d_all[i-1], a_all[i-1], alpha_all[i-1]))
        return T

    def get_T__i0(self, i, theta_all, d_all, a_all, alpha_all) -> np.array:
        return self.get_T_jk(i,0,theta_all, d_all, a_all, alpha_all)
    
    
    def get_parameter_jacobian(self, theta_all, d_all, a_all, alpha_all) -> np.array:
        W1 = W2 = W3 = W4 = W7 = W8 = np.zeros((3,0))
        T__7_0=self.get_T__i0(7, theta_all, d_all, a_all, alpha_all)
        t__7_0=T__7_0[0:3,3]
        for i in range(1,8): # i=1..7
            T__i_0=self.get_T__i0(i-1, theta_all, d_all, a_all, alpha_all)
            t__i_0=T__i_0[0:3,3]
            R__i_0=T__i_0[0:3,0:3]
            m__1i=np.array([[0],[0],[1]])
            m__2i=np.array([[math.cos(theta_all[i-1])],[math.sin(theta_all[i-1])],[0]])
            m__3i=np.array([[-d_all[i-1]*math.sin(theta_all[i-1])],[d_all[i-1]*math.cos(theta_all[i-1])],[0]])
            _t1=np.matmul(R__i_0,m__1i)
            _t2=np.matmul(R__i_0,m__2i)

            # W1[:,i-1]=np.cross(t__i_0,_t1)
            _w=np.reshape(np.cross(t__i_0,_t1.flatten()),(3,1))
            W1 = np.concatenate((W1,_w), axis=1)
            
            W2 = np.concatenate((W2,_t1), axis=1)

            W3 = np.concatenate((W3,_t2), axis=1)

            _w=np.reshape(np.cross(t__i_0,_t2.flatten()),(3,1))+np.matmul(R__i_0,m__3i)
            W4 = np.concatenate((W4,_w),axis=1)

            _w = np.reshape(np.cross(_t1.flatten(),t__7_0),(3,1))+np.reshape(W1[:,-1],(3,1))
            W7 = np.concatenate((W7,_w),axis=1)
            # print("i={}".format(i))
            # print(str(W7)+"\n")

            _w=np.reshape(np.cross(_t2.flatten(),t__7_0),(3,1))+np.reshape(W4[:,-1],(3,1))
            W8=np.concatenate((W8,_w),axis=1)
        J = np.zeros((6,28))
        J[0:3,:]=np.concatenate((W7, W2, W3, W8), axis=1)
        J[3:6,:]=np.concatenate((W2, np.zeros((3,7)), np.zeros((3,7)), W3), axis=1)
        return J



theta_nom=np.array([0,0,0,0,0,0,0])
d_nom=np.array([0,0,0.42,0,0.4,0,0])
a_nom=np.array([0,0,0,0,0,0,0])
alpha_nom=np.array([0,np.pi/2,-np.pi/2,-np.pi/2,np.pi/2,np.pi/2,-np.pi/2])

# theta_real=theta_nom + np.array([0,0,0,0,0,0,0])
d_real=d_nom + np.array([0,0,0,0,0,0,0.1])
a_real=a_nom + np.array([0,0,0,0,0,0,0])
alpha_real=alpha_nom + np.array([0,0.0002,0,0,0,0,0])

end=2000
estimator=DHestimator()
printvar=np.zeros((1,end))
delta_xs=np.zeros((28,end))
jacobian=np.zeros((0,28))
pos_error=np.zeros((0,1))

for k in range(0,end):
    # theta_nom=theta_nom + np.random.default_rng().normal(0, 0.01, (7,))
    theta_nom=theta_nom + np.ones(7)*np.pi/(end*2)
    theta_real=theta_nom + np.array([0,0,0,0,0,0,0])
    jacobian=np.concatenate((jacobian,estimator.get_parameter_jacobian(theta_nom, d_nom, a_nom, alpha_nom)[0:3,:]),axis=0)

    nominal_pos=estimator.get_T__i0(7,theta_nom, d_nom, a_nom, alpha_nom)[0:3,3].reshape((3,1))
    real_pos=estimator.get_T__i0(7, theta_real, d_real, a_real, alpha_real)[0:3,3].reshape((3,1))
    pos_error=np.concatenate((pos_error,real_pos-nominal_pos),axis=0)

    # ## use builtin least squares
    x, resids, rank, s = np.linalg.lstsq(jacobian,pos_error,rcond=None)
    x=x.flatten()

    ## use damped least squares
    # lambda_k = 0.8 # damping coeff
    # jacobian_transp = np.matrix.transpose(jacobian)
    # _t1 = -np.linalg.inv(np.matmul(jacobian_transp,jacobian) + lambda_k*np.eye(28))
    # _t2 = np.matmul(_t1, jacobian_transp)
    # x = np.matmul(_t2,pos_error)
    # x=x.flatten()

    delta_xs[:,k] = x

    # theta_nom=theta_nom + x[0:7]
    # d_nom=d_nom+x[7:14]
    # a_nom=a_nom+x[14:21]
    # alpha_nom=alpha_nom+x[21:28]


X = range(0,end)
figure, axis = plt.subplots(2, 2)

axis[0,0].plot(X,delta_xs[0,:].flatten(), color='tab:blue',   label='0')
axis[0,0].plot(X,delta_xs[1,:].flatten(), color='tab:orange', label='1')
axis[0,0].plot(X,delta_xs[2,:].flatten(), color='tab:green',  label='2')
axis[0,0].plot(X,delta_xs[3,:].flatten(), color='tab:red',    label='3')
axis[0,0].plot(X,delta_xs[4,:].flatten(), color='tab:purple', label='4')
axis[0,0].plot(X,delta_xs[5,:].flatten(), color='tab:olive',  label='5')
axis[0,0].plot(X,delta_xs[6,:].flatten(), color='tab:cyan',   label='6')
axis[0,0].set_title("d theta")
axis[0,0].legend()

axis[0,1].plot(X,delta_xs[7,:].flatten(), color='tab:blue',   label='0')
axis[0,1].plot(X,delta_xs[8,:].flatten(), color='tab:orange', label='1')
axis[0,1].plot(X,delta_xs[9,:].flatten(), color='tab:green',  label='2')
axis[0,1].plot(X,delta_xs[10,:].flatten(), color='tab:red',    label='3')
axis[0,1].plot(X,delta_xs[11,:].flatten(), color='tab:purple', label='4')
axis[0,1].plot(X,delta_xs[12,:].flatten(), color='tab:olive',  label='5')
axis[0,1].plot(X,delta_xs[13,:].flatten(), color='tab:cyan',   label='6')
axis[0,1].set_title("d d")
axis[0,1].legend()

axis[1,0].plot(X,delta_xs[14,:].flatten(), color='tab:blue',   label='0')
axis[1,0].plot(X,delta_xs[15,:].flatten(), color='tab:orange', label='1')
axis[1,0].plot(X,delta_xs[16,:].flatten(), color='tab:green',  label='2')
axis[1,0].plot(X,delta_xs[17,:].flatten(), color='tab:red',    label='3')
axis[1,0].plot(X,delta_xs[18,:].flatten(), color='tab:purple', label='4')
axis[1,0].plot(X,delta_xs[19,:].flatten(), color='tab:olive',  label='5')
axis[1,0].plot(X,delta_xs[20,:].flatten(), color='tab:cyan',   label='6')
axis[1,0].set_title("d a")
axis[1,0].legend()

axis[1,1].plot(X,delta_xs[21,:].flatten(), color='tab:blue',   label='0')
axis[1,1].plot(X,delta_xs[22,:].flatten(), color='tab:orange', label='1')
axis[1,1].plot(X,delta_xs[23,:].flatten(), color='tab:green',  label='2')
axis[1,1].plot(X,delta_xs[24,:].flatten(), color='tab:red',    label='3')
axis[1,1].plot(X,delta_xs[25,:].flatten(), color='tab:purple', label='4')
axis[1,1].plot(X,delta_xs[26,:].flatten(), color='tab:olive',  label='5')
axis[1,1].plot(X,delta_xs[27,:].flatten(), color='tab:cyan',   label='6')
axis[1,1].set_title("d alpha")
axis[1,1].legend()

plt.show()